openapi: 3.0.3
info:
  title: Sushi-Bar Web Application API
  description: REST API for managing a Sushi-Bar system.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server
tags:
  - name: menu
    description: Operations related to the menu
  - name: orders
    description: Handling customer orders
  - name: reservations
    description: Table reservations for customers
  - name: users
    description: User account management
  - name: auth
    description: Authentication operations like login and logout
  - name: tables
    description: table operations
  - name: statistics
    description: View method usage and performance stats
paths:
  /menu:
    get:
      tags:
        - menu
      summary: Get all menu items with pagination
      operationId: getAllMenuItems
      parameters:
        - name: page
          in: query
          description: Page number (starting from 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter items by category (e.g., Roll, Soup, Appetizer)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Paginated list of menu items
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Unauthorized – missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden – access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - menu
      summary: Add a new menu item
      operationId: addMenuItem
      description: Admin can add a new sushi item to the menu.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
      responses:
        '201':
          description: Menu item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
              examples:
                example1:
                  value:
                    id: 3
                    name: "Salmon Nigiri"
                    price: 10.99
                    description: "Fresh salmon on top of sushi rice."
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
    delete:
      tags:
        - menu
      summary: Delete all menu items
      operationId: deleteAllMenuItems
      description: Remove all sushi items from the menu (Admin only).
      responses:
        '204':
          description: All menu items deleted successfully
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
  /menu/{id}:
    get:
      tags:
        - menu
      summary: Get a specific menu item
      operationId: getMenuItemById
      description: Retrieve details of a specific sushi item by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the menu item to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Details of the menu item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
              examples:
                example1:
                  value:
                    id: 1
                    name: "California Roll"
                    price: 8.99
                    description: "A sushi roll with crab, avocado, and cucumber."
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Menu item not found"
    put:
      tags:
        - menu
      summary: Update a menu item
      operationId: updateMenuItem
      description: Modify an existing sushi item (Admin only).
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the menu item to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
      responses:
        '200':
          description: Menu item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
              examples:
                example1:
                  value:
                    id: 1
                    name: "California Roll"
                    price: 8.99
                    description: "A sushi roll with crab, avocado, and cucumber."
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid data provided"
        '404':
          description: Menu item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Menu item not found"
    delete:
      tags:
        - menu
      summary: Delete a menu item
      operationId: deleteMenuItem
      description: Remove a sushi item from the menu (Admin only).
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the menu item to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Menu item deleted successfully
        '404':
          description: Menu item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Menu item not found"
  /menu/top:
    get:
      tags:
        - menu
      summary: Get top 5 menu items by price
      operationId: getTopMenuItems
      responses:
        '200':
          description: Top menu items fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Something went wrong"
  /reservations:
    post:
      tags:
        - reservations
      summary: Create a new reservation
      operationId: createReservation
      description: Customers can reserve a table at the sushi bar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
              examples:
                example1:
                  value:
                    reservationId: 1
                    status: "Confirmed"
                    date: "2023-10-01T19:00:00Z"
        '400':
          description: Invalid reservation data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid reservation data"
    get:
      tags:
        - reservations
      summary: Get all reservations with pagination
      operationId: getAllReservations
      parameters:
        - name: page
          in: query
          description: Page number (starting from 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Paginated list of reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReservationResponse'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete all reservations
      operationId: deleteAllReservations
      tags:
        - reservations
      responses:
        '204':
          description: All reservations deleted
        '500':
          description: Server error
  /reservations/{reservationId}:
    get:
      tags:
        - reservations
      summary: Get reservation details
      operationId: getReservationById
      description: Retrieve details of a specific reservation.
      parameters:
        - name: reservationId
          in: path
          required: true
          description: The ID of the reservation to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Details of the reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
              examples:
                example1:
                  value:
                    reservationId: 1
                    customerNumber: "Mohammed Qassim"
                    status: "Confirmed"
                    date: "2023-10-01T19:00:00Z"
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reservation not found"
    delete:
      tags:
        - reservations
      summary: Cancel a reservation
      operationId: cancelReservation
      description: Allows a customer to cancel an existing reservation.
      parameters:
        - name: reservationId
          in: path
          required: true
          description: The ID of the reservation to cancel.
          schema:
            type: integer
      responses:
        '204':
          description: Reservation successfully canceled
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reservation not found"
  /reservations/{reservationId}/status:
    patch:
      tags:
        - reservations
      summary: Update reservation status
      operationId: updateReservationStatus
      description: Update the status of a reservation (e.g., Pending → Confirmed → Completed).
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [ Pending, Confirmed, Cancelled, Completed ]
      responses:
        '200':
          description: Reservation status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '400':
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      tags:
        - users
      summary: Get all users with pagination
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - users
      summary: Create a new user (Admin only)
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - users
      summary: Delete all users (Admin only)
      operationId: deleteAllUsers
      security:
        - bearerAuth: []
      responses:
        '204':
          description: All users deleted successfully
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      tags:
        - users
      summary: Get profile of current logged-in user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's own profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID (Admin only)
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - users
      summary: Update user by ID (Admin or same user)
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - users
      summary: Delete user by ID (Admin only)
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /orders:
    get:
      tags:
        - orders
      summary: Get all orders with pagination
      operationId: getAllOrders
      parameters:
        - name: page
          in: query
          description: Page number (starting from 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Paginated list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderResponse'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - orders
      summary: Place a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  value:
                    orderId: 3
                    customerNumber: "Alice Smith"
                    status: "Pending"
                    items:
                      - id: 1
                        name: "California Roll"
                        price: 8.99
        '400':
          description: Invalid order data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid order data"
  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  value:
                    orderId: 1
                    customerNumber: "Mohammed Qassim"
                    status: "Completed"
                    items:
                      - id: 1
                        name: "California Roll"
                        price: 8.99
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Order not found"
    delete:
      tags:
        - orders
      summary: Cancel an order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to cancel.
          schema:
            type: integer
      responses:
        '204':
          description: Order canceled successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Order not found"
  /orders/by-user/{userId}:
    get:
      tags:
        - orders
      summary: Get all orders by user ID
      operationId: getOrdersByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user whose orders to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: List of orders for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  value:
                    - orderId: 1
                      customerNumber: "Mohammed Qassim"
                      status: "Completed"
                      items:
                        - id: 1
                          name: "California Roll"
                          price: 8.99
        '404':
          description: No orders found for this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No orders found for user"
  /orders/{orderId}/status:
    patch:
      tags:
        - orders
      summary: Update order status
      operationId: updateOrderStatus
      description: Change the status of an order (e.g., Pending → Preparing → Ready → Delivered).
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [ Pending, Preparing, Ready, Delivered, Cancelled ]
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      operationId: registerUser
      description: Creates a new user account with email, password, and phone number.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - phone
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - auth
      summary: Login with email and password
      operationId: loginUser
      description: Authenticate user and return JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUser200Response'
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout the user
      operationId: logoutUser
      description: Simply informs the client to delete the token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out (client should delete token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token invalidated on client-side. Please delete it."
  /auth/me:
    get:
      tags:
        - auth
      summary: Get current authenticated user by ID
      operationId: getCurrentAuthenticatedUser
      description: Returns the profile of the user by ID (temporary implementation before using real tokens).
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    id: 1
                    username: Mohammed
                    email: mohammed@g.com
                    phone: "+123456789"
                    role: customer
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tables:
    get:
      tags:
        - tables
      summary: Get all tables
      operationId: getAllTables
      responses:
        '200':
          description: List of all tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'

    post:
      tags:
        - tables
      summary: Add a new table (admin)
      operationId: createTable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '201':
          description: Table created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
  /tables/{id}/availability:
    patch:
      tags:
        - tables
      summary: Update table availability
      operationId: updateTableAvailability
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: available
          in: query
          required: true
          schema:
            type: boolean
        - name: seats
          in: query
          required: true
          schema:
            type: integer            
      responses:
        '200':
          description: Availability updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
  /statistics:
    get:
      tags:
        - statistics
      summary: View usage statistics
      description: Shows how many times each method was called and the highest price returned.
      operationId: getStatistics
      responses:
        '200':
          description: Statistics data returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  methodStats:
                    type: array
                    items:
                      type: object
                      properties:
                        methodKey:
                          type: string
                        callCount:
                          type: integer
                        maxReturnedPrice:
                          type: number
                          format: float
                  mostCalledMethod:
                    type: string
                  mostCalledCount:
                    type: integer
                  highestPrice:
                    type: number
                    format: float
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    MenuItem:
      type: object
      required:
        - name
        - price
      properties:
        id:
          type: integer
        name:
          type: string
          description: Name of the sushi item
        price:
          type: number
          format: float
          description: Price of the item
        description:
          type: string
        category:
          type: string
          description: Category of the item (e.g., Roll, Soup, Dessert)
        imageUrl:
          type: string
          format: uri
          description: URL of the menu item image
    Table:
      type: object
      properties:
        id:
          type: integer
        tableNumber:
          type: integer
        location:
          type: string
        position:
          type: string
        available:
          type: boolean
        seats:
          type: integer

    ReservationRequest:
      type: object
      required:
        - customerNumber
        - date
        - tableNumber
        - numberOfPeople
        - location
        - position
        - seats
      properties:
        customerNumber:
          type: string
        date:
          type: string
          format: date-time
        tableNumber:
          type: integer
        numberOfPeople:
          type: integer
        location:
          type: string
        position:
          type: string

    ReservationResponse:
      type: object
      properties:
        reservationId:
          type: integer
        customerNumber:
          type: string
        status:
          type: string
          enum: [ Pending, Confirmed, Cancelled, Completed ]
        date:
          type: string
          format: date-time
        numberOfPeople:
          type: integer
        location:
          type: string
        position:
          type: string
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        role:
          type: string
        password:
         type: string
         format: password
    OrderRequest:
      type: object
      required:
        - items
        - phone
      properties:
        phone:
          type: string
          example: "+1234567890"
        items:
          type: array
          items:
            type: integer
            description: Menu item IDs
        paid: # ✅ جديد
          type: boolean
        createdOn: # ✅ جديد
          type: string
          format: date-time
        notes:
          type: string
    LoginUser200Response:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    OrderResponse:
      type: object
      properties:
        orderId:
          type: integer
        phone:
          type: string
        status:
          type: string
          enum: [ Pending, Preparing, Ready, Delivered, Cancelled ]
        notes:
          type: string
        paid: # ✅ جديد
          type: boolean
        createdOn: # ✅ جديد
          type: string
          format: date-time
        totalCost: # ✅ اختياري (لحساب الكلفة المجمعة)
          type: number
          format: float
        buyer: # ✅ جديد (مثلاً username)
          $ref: '#/components/schemas/BuyerSummary'
        items:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    BuyerSummary:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid status transition from PENDING to COMPLETED
